{
  "name": "coc-go",
  "version": "0.11.0",
  "description": "gopls extension for coc",
  "author": "Josa Gesell <josa@gesell.me>",
  "license": "MIT",
  "main": "lib/extension.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/josa42/coc-go.git"
  },
  "engines": {
    "coc": "^0.0.73",
    "node": ">=10"
  },
  "keywords": [
    "coc.nvim",
    "languageserver",
    "gopls",
    "go",
    "golang",
    "vim",
    "neovim"
  ],
  "scripts": {
    "test": "mocha --require ts-node/register '**/*.test.ts'",
    "test:watch": "mocha --watch --watch-files '**/*.ts' --require ts-node/register '**/*.test.ts'",
    "clean": "rimraf lib",
    "build": "tsc -p tsconfig.json",
    "build:watch": "tsc --watch -p tsconfig.json",
    "prepare": "yarn clean && yarn build",
    "link:add": "node ./scripts/link.js add",
    "link:remove": "node ./scripts/link.js remove",
    "update": "yarn run update:snippets && yarn run update:options && yarn run update:readme && yarn run update:readme",
    "update:snippets": "./scripts/update-snippets.js",
    "update:options": "./scripts/update-options.sh && node ./scripts/update-options-interface.js",
    "update:commands": "./scripts/update-commands.js",
    "update:readme": "./scripts/update-tables.sh",
    "lint": "eslint . --ext .ts,.js"
  },
  "activationEvents": [
    "onLanguage:go",
    "onLanguage:gomod",
    "onCommand:go.install.gomodifytags",
    "onCommand:go.install.goplay",
    "onCommand:go.install.gopls",
    "onCommand:go.install.gotests",
    "onCommand:go.install.impl",
    "onCommand:go.install.tools",
    "onCommand:go.version"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "go",
        "patterns": [
          "go.mod"
        ]
      },
      {
        "filetype": "gomod",
        "patterns": [
          "go.mod"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "gols",
      "properties": {
        "go.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable Go extension"
        },
        "go.trace.server": {
          "type": "string",
          "default": "off",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "description": "Trace level of gopls"
        },
        "go.goplsPath": {
          "type": "string",
          "description": "Path to `gopls` bin (Change requires `:CocRestart`)"
        },
        "go.goplsArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments passed to `gopls` (Change requires `:CocRestart`)"
        },
        "go.goplsEnv": {
          "type": "object",
          "patternProperties": {
            "^.+$": {
              "type": "string"
            }
          },
          "description": "ENV passed to `gopls` (Change requires `:CocRestart`)"
        },
        "go.goplsUseDaemon": {
          "type": "boolean",
          "default": true,
          "description": "Run gopls as daemon"
        },
        "go.disable": {
          "type": "object",
          "description": "Disable gopls features",
          "default": {},
          "properties": {
            "workspaceFolders": {
              "type": "boolean",
              "default": false,
              "description": "Disable workspaceFolders feature (Change requires `:CocRestart`)"
            },
            "diagnostics": {
              "type": "boolean",
              "default": false,
              "description": "Disable handle diagnostics (Change requires `:CocRestart`)"
            },
            "completion": {
              "type": "boolean",
              "default": false,
              "description": "Disable completion feature (Change requires `:CocRestart`)"
            }
          }
        },
        "go.goplsOptions": {
          "type": "object",
          "description": "See `gopls` documentation: https://github.com/golang/tools/blob/master/gopls/doc/settings.md",
          "properties": {
            "buildFlags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "buildFlags is the set of flags passed on to the build system when invoked.\nIt is applied to queries like `go list`, which is used when discovering files.\nThe most common use is to set `-tags`.\n"
            },
            "env": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "env adds environment variables to external commands run by `gopls`, most notably `go list`.\n"
            },
            "hoverKind": {
              "type": "string",
              "enum": [
                "NoDocumentation",
                "SynopsisDocumentation",
                "FullDocumentation",
                "SingleLine",
                "Structured"
              ],
              "default": "FullDocumentation",
              "description": "hoverKind controls the information that appears in the hover text.\nIt must be one of:\n* `\"NoDocumentation\"`\n* `\"SynopsisDocumentation\"`\n* `\"FullDocumentation\"`\n\nAuthors of editor clients may wish to handle hover text differently, and so might use different settings. The options below are not intended for use by anyone other than the authors of editor plugins.\n\n* `\"SingleLine\"`\n* `\"Structured\"`\n"
            },
            "usePlaceholders": {
              "type": "boolean",
              "default": false,
              "description": "placeholders enables placeholders for function parameters or struct fields in completion responses.\n"
            },
            "linkTarget": {
              "type": "string",
              "default": "pkg.go.dev",
              "description": "linkTarget controls where documentation links go.\nIt might be one of:\n\n* `\"godoc.org\"`\n* `\"pkg.go.dev\"`\n\nIf company chooses to use its own `godoc.org`, its address can be used as well.\n"
            },
            "local": {
              "type": "string",
              "default": "",
              "description": "local is the equivalent of the `goimports -local` flag, which puts imports beginning with this string after 3rd-party packages.\nIt should be the prefix of the import path whose imports should be grouped separately.\n"
            },
            "gofumpt": {
              "type": "boolean",
              "default": false,
              "description": "gofumpt indicates if we should run gofumpt formatting.\n"
            },
            "analyses": {
              "type": "object",
              "default": null,
              "description": "[EXPERIMENTAL] analyses specify analyses that the user would like to enable or disable.\nA map of the names of analysis passes that should be enabled/disabled.\nA full list of analyzers that gopls uses can be found [here](analyzers.md)\n\nExample Usage:\n```json5\n...\n\"analyses\": {\n  \"unreachable\": false, // Disable the unreachable analyzer.\n  \"unusedparams\": true  // Enable the unusedparams analyzer.\n}\n...\n```\n",
              "additionalProperties": false,
              "properties": {
                "asmdecl": {
                  "type": "boolean",
                  "default": true
                },
                "assign": {
                  "type": "boolean",
                  "default": true
                },
                "atomic": {
                  "type": "boolean",
                  "default": true
                },
                "atomicalign": {
                  "type": "boolean",
                  "default": true
                },
                "bools": {
                  "type": "boolean",
                  "default": true
                },
                "buildtag": {
                  "type": "boolean",
                  "default": true
                },
                "cgocall": {
                  "type": "boolean",
                  "default": true
                },
                "composites": {
                  "type": "boolean",
                  "default": true
                },
                "copylock": {
                  "type": "boolean",
                  "default": true
                },
                "errorsas": {
                  "type": "boolean",
                  "default": true
                },
                "httpresponse": {
                  "type": "boolean",
                  "default": true
                },
                "loopclosure": {
                  "type": "boolean",
                  "default": true
                },
                "lostcancel": {
                  "type": "boolean",
                  "default": true
                },
                "nilfunc": {
                  "type": "boolean",
                  "default": true
                },
                "printf": {
                  "type": "boolean",
                  "default": true
                },
                "shift": {
                  "type": "boolean",
                  "default": true
                },
                "stdmethods": {
                  "type": "boolean",
                  "default": true
                },
                "structtag": {
                  "type": "boolean",
                  "default": true
                },
                "tests": {
                  "type": "boolean",
                  "default": true
                },
                "unmarshal": {
                  "type": "boolean",
                  "default": true
                },
                "unreachable": {
                  "type": "boolean",
                  "default": true
                },
                "unsafeptr": {
                  "type": "boolean",
                  "default": true
                },
                "unusedresult": {
                  "type": "boolean",
                  "default": true
                },
                "deepequalerrors": {
                  "type": "boolean",
                  "default": true
                },
                "fillreturns": {
                  "type": "boolean",
                  "default": false
                },
                "nonewvars": {
                  "type": "boolean",
                  "default": false
                },
                "noresultvalues": {
                  "type": "boolean",
                  "default": true
                },
                "simplifycompositelit": {
                  "type": "boolean",
                  "default": true
                },
                "simplifyrange": {
                  "type": "boolean",
                  "default": true
                },
                "simplifyslice": {
                  "type": "boolean",
                  "default": true
                },
                "sortslice": {
                  "type": "boolean",
                  "default": true
                },
                "testinggoroutine": {
                  "type": "boolean",
                  "default": true
                },
                "undeclaredname": {
                  "type": "boolean",
                  "default": false
                },
                "unusedparams": {
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "codelens": {
              "type": "object",
              "description": "[EXPERIMENTAL] overrides the enabled/disabled state of various code lenses. Currently, we\nsupport several code lenses:\n\n* `generate`: run `go generate` as specified by a `//go:generate` directive.\n* `upgrade_dependency`: upgrade a dependency listed in a `go.mod` file.\n* `test`: run `go test -run` for a test func.\n* `gc_details`: Show the gc compiler's choices for inline analysis and escaping.\n\nExample Usage:\n```json5\n\"gopls\": {\n...\n  \"codelens\": {\n    \"generate\": false,  // Don't run `go generate`.\n    \"gc_details\": true  // Show a code lens toggling the display of gc's choices.\n  }\n...\n}\n```\n",
              "additionalProperties": false,
              "properties": {
                "gc_details": {
                  "type": "boolean",
                  "default": false
                },
                "generate": {
                  "type": "boolean",
                  "default": true
                },
                "regenerate_cgo": {
                  "type": "boolean",
                  "default": true
                },
                "tidy": {
                  "type": "boolean",
                  "default": true
                },
                "upgrade_dependency": {
                  "type": "boolean",
                  "default": true
                },
                "vendor": {
                  "type": "boolean",
                  "default": true
                }
              }
            },
            "completionDocumentation": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] completionDocumentation enables documentation with completion results.\n"
            },
            "completeUnimported": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] completeUnimported enables completion for packages that you do not currently import.\n"
            },
            "deepCompletion": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] deepCompletion If true, this turns on the ability to return completions from deep inside relevant entities, rather than just the locally accessible ones.\n\nConsider this example:\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype wrapString struct {\n    str string\n}\n\nfunc main() {\n    x := wrapString{\"hello world\"}\n    fmt.Printf(<>)\n}\n```\n\nAt the location of the `<>` in this program, deep completion would suggest the result `x.str`.\n"
            },
            "matcher": {
              "type": "string",
              "enum": [
                "fuzzy",
                "caseSensitive",
                "caseInsensitive"
              ],
              "default": "Fuzzy",
              "description": "[EXPERIMENTAL] matcher sets the algorithm that is used when calculating completion candidates. Must be one of:\n\n* `\"fuzzy\"`\n* `\"caseSensitive\"`\n* `\"caseInsensitive\"`\n"
            },
            "annotations": {
              "type": "object",
              "patternProperties": {
                ".+": {
                  "type": "string"
                }
              },
              "default": null,
              "description": "[EXPERIMENTAL] annotations suppress various kinds of optimization diagnostics\nthat would be reported by the gc_details command.\n  noNilcheck suppresses display of nilchecks.\n  noEscape suppresses escape choices.\n  noInline suppresses inlining choices.\n  noBounds suppresses bounds checking diagnositcs.\n"
            },
            "staticcheck": {
              "type": "boolean",
              "default": false,
              "description": "[EXPERIMENTAL] staticcheck enables additional analyses from staticcheck.io.\n"
            },
            "symbolMatcher": {
              "type": "string",
              "enum": [
                "fuzzy",
                "caseSensitive",
                "caseInsensitive"
              ],
              "default": "SymbolFuzzy",
              "description": "[EXPERIMENTAL] symbolMatcher sets the algorithm that is used when finding workspace symbols. Must be one of:\n\n* `\"fuzzy\"`\n* `\"caseSensitive\"`\n* `\"caseInsensitive\"`\n"
            },
            "symbolStyle": {
              "type": "string",
              "enum": [
                "full",
                "dynamic",
                "package"
              ],
              "default": "PackageQualifiedSymbols",
              "description": "[EXPERIMENTAL] symbolStyle specifies what style of symbols to return in symbol requests. Must be one of:\n\n* `\"full\"`\n* `\"dynamic\"`\n* `\"package\"`\n"
            },
            "linksInHover": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] linksInHover toggles the presence of links to documentation in hover.\n"
            },
            "tempModfile": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] tempModfile controls the use of the -modfile flag in Go 1.14.\n"
            },
            "importShortcut": {
              "type": "string",
              "enum": [
                "both",
                "link",
                "definition"
              ],
              "default": "Both",
              "description": "[EXPERIMENTAL] importShortcut specifies whether import statements should link to\ndocumentation or go to definitions. Must be one of:\n\n* `\"both\"`\n* `\"link\"`\n* `\"definition\"`\n"
            },
            "verboseWorkDoneProgress": {
              "type": "boolean",
              "default": false,
              "description": "[EXPERIMENTAL] verboseWorkDoneProgress controls whether the LSP server should send\nprogress reports for all work done outside the scope of an RPC.\n"
            },
            "expandWorkspaceToModule": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] expandWorkspaceToModule instructs `gopls` to expand the scope of the workspace to include the\nmodules containing the workspace folders. Set this to false to avoid loading\nyour entire module. This is particularly useful for those working in a monorepo.\n"
            },
            "experimentalWorkspaceModule": {
              "type": "boolean",
              "default": false,
              "description": "[EXPERIMENTAL] experimentalWorkspaceModule opts a user into the experimental support\nfor multi-module workspaces.\n"
            }
          }
        },
        "go.tags": {
          "type": "object",
          "properties": {
            "tags": {
              "type": "string",
              "default": "json",
              "description": "Comma separated tags to be used by `go.tags.add` command"
            },
            "options": {
              "type": "string",
              "default": "json=omitempty",
              "description": "Comma separated tag=options pairs to be used by `go.tags.add` command"
            },
            "transform": {
              "type": "string",
              "enum": [
                "snakecase",
                "camelcase"
              ],
              "default": "snakecase",
              "description": "Transformation rule used by `go.tags.add` command to add tags"
            },
            "skipUnexported": {
              "type": "boolean",
              "default": false,
              "description": "If true, skip unexported fields"
            }
          }
        },
        "go.tests": {
          "type": "object",
          "properties": {
            "generateFlags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "description": "Additional command line flags to pass to `gotests` for generating tests."
            }
          }
        },
        "go.checkForUpdates": {
          "description": "[EXPERIMENTAL] Check for gopls updates on start.",
          "type": "string",
          "default": "disabled",
          "enum": [
            "disabled",
            "inform",
            "ask",
            "install"
          ]
        }
      }
    },
    "commands": [
      {
        "title": "Generate interface stubs",
        "category": "Go",
        "command": "go.impl.cursor"
      },
      {
        "title": "Install / update gomodifytags",
        "category": "Go",
        "command": "go.install.gomodifytags"
      },
      {
        "title": "Install / update goplay",
        "category": "Go",
        "command": "go.install.goplay"
      },
      {
        "title": "Install / update gopls",
        "category": "Go",
        "command": "go.install.gopls"
      },
      {
        "title": "Install / update gotests",
        "category": "Go",
        "command": "go.install.gotests"
      },
      {
        "title": "Install / update impl",
        "category": "Go",
        "command": "go.install.impl"
      },
      {
        "title": "Install / update all tools",
        "category": "Go",
        "command": "go.install.tools"
      },
      {
        "title": "Run on go playground",
        "category": "Go",
        "command": "go.playground"
      },
      {
        "title": "Add tags to struct fields",
        "category": "Go",
        "command": "go.tags.add"
      },
      {
        "title": "Add tags to struct field in current line",
        "category": "Go",
        "command": "go.tags.add.line"
      },
      {
        "title": "Add tags to struct fields (prompt)",
        "category": "Go",
        "command": "go.tags.add.prompt"
      },
      {
        "title": "Remove all tags from struct fields",
        "category": "Go",
        "command": "go.tags.clear"
      },
      {
        "title": "Remove all tags from struct fields in current line",
        "category": "Go",
        "command": "go.tags.clear.line"
      },
      {
        "title": "Remove tags from struct fields",
        "category": "Go",
        "command": "go.tags.remove"
      },
      {
        "title": "Remove tags from struct field in current line",
        "category": "Go",
        "command": "go.tags.remove.line"
      },
      {
        "title": "Remove tags from struct fields (prompt)",
        "category": "Go",
        "command": "go.tags.remove.prompt"
      },
      {
        "title": "Generate unit tests for exported functions in file",
        "category": "Go",
        "command": "go.test.generate.exported"
      },
      {
        "title": "Generate unit tests for file",
        "category": "Go",
        "command": "go.test.generate.file"
      },
      {
        "title": "Generate unit tests for current function",
        "category": "Go",
        "command": "go.test.generate.function"
      },
      {
        "title": "Toggle test file",
        "category": "Go",
        "command": "go.test.toggle"
      },
      {
        "title": "Print extension version",
        "category": "Go",
        "command": "go.version"
      }
    ],
    "snippets": [
      {
        "language": "go",
        "path": "./snippets/go.json"
      },
      {
        "language": "gomod",
        "path": "./snippets/gomod.json"
      }
    ]
  },
  "devDependencies": {
    "@types/mocha": "^8.0.0",
    "@types/node": "^14.0.5",
    "@types/node-fetch": "^2.5.7",
    "@types/tmp": "^0.2.0",
    "@types/which": "^1.3.2",
    "@typescript-eslint/eslint-plugin": "^3.0.0",
    "@typescript-eslint/parser": "^3.0.0",
    "coc.nvim": "0.0.77",
    "eslint": "^7.1.0",
    "eslint-config-josa-typescript": "^0.1.2",
    "mocha": "^8.0.1",
    "rimraf": "^3.0.2",
    "tmp": "^0.2.1",
    "ts-node": "^8.10.1",
    "typescript": "~3.9.3"
  },
  "dependencies": {
    "node-fetch": "^2.6.0",
    "tslib": "^2.0.0",
    "which": "^2.0.2"
  }
}